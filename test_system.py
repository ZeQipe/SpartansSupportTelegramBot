#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ TelSuppBot
"""

import os
import sys
import logging
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_chunker():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —á–∞–Ω–∫–∏–Ω–≥–∞"""
    logger.info("Testing LineChunker...")
    
    try:
        from embeddings.line_chunker import LineChunker
        
        chunker = LineChunker()
        logger.info("‚úì LineChunker initialized successfully")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –æ–¥–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
        test_file = "data/en/terms.txt"
        if os.path.exists(test_file):
            chunks = chunker.process_document(test_file, "en")
            logger.info(f"‚úì Created {len(chunks)} chunks from {test_file}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–∞–Ω–∫–æ–≤
            for i, chunk in enumerate(chunks[:3]):  # –ü–µ—Ä–≤—ã–µ 3 —á–∞–Ω–∫–∞
                logger.info(f"  Chunk {i+1}: {len(chunk.content)} chars, section: {chunk.section}")
        else:
            logger.warning(f"‚ö† Test file {test_file} not found")
        
        return True
    except Exception as e:
        logger.error(f"‚úó LineChunker test failed: {e}")
        return False

def test_embedder():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    logger.info("Testing Embedder...")
    
    try:
        from embeddings.embedder import Embedder
        
        embedder = Embedder()
        logger.info("‚úì Embedder initialized successfully")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        test_text = "This is a test text for embedding generation."
        embedding = embedder.embed_text(test_text)
        logger.info(f"‚úì Created embedding with dimension: {len(embedding)}")
        
        return True
    except Exception as e:
        logger.error(f"‚úó Embedder test failed: {e}")
        return False

def test_vector_store():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    logger.info("Testing VectorStore...")
    
    try:
        from embeddings.vector_store import VectorStore
        from embeddings.embedder import Embedder
        
        embedder = Embedder()
        vector_store = VectorStore()
        logger.info("‚úì VectorStore initialized successfully")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        test_query = "minimum deposit"
        results = vector_store.search_by_text(test_query, embedder, top_k=3)
        logger.info(f"‚úì Search returned {len(results)} results")
        
        return True
    except Exception as e:
        logger.error(f"‚úó VectorStore test failed: {e}")
        return False

def test_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞"""
    logger.info("Testing DocumentSearch...")
    
    try:
        from embeddings.search import DocumentSearch
        from embeddings.vector_store import VectorStore
        from embeddings.embedder import Embedder
        
        embedder = Embedder()
        vector_store = VectorStore()
        search = DocumentSearch(vector_store, embedder)
        logger.info("‚úì DocumentSearch initialized successfully")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        test_query = "bonus rules"
        results = search.search(test_query, language="en", top_k=3)
        logger.info(f"‚úì Search returned {len(results)} results")
        
        return True
    except Exception as e:
        logger.error(f"‚úó DocumentSearch test failed: {e}")
        return False

def test_deepseek_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç DeepSeek API"""
    logger.info("Testing DeepSeek API...")
    
    try:
        from llm.deepseek_api import DeepSeekAPI
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
        api = DeepSeekAPI("test_key")
        logger.info("‚úì DeepSeek API initialized successfully")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞)
        logger.info("‚ö† DeepSeek API connection test skipped (no real API key)")
        
        return True
    except Exception as e:
        logger.error(f"‚úó DeepSeek API test failed: {e}")
        return False

def test_document_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    logger.info("Testing full document processing with LineChunker...")
    
    try:
        from embeddings.line_chunker import LineChunker
        from embeddings.embedder import Embedder
        from embeddings.vector_store import VectorStore
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        chunker = LineChunker()
        embedder = Embedder()
        vector_store = VectorStore()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        logger.info("Processing documents...")
        chunks = chunker.process_all_documents("data")
        logger.info(f"‚úì Created {len(chunks)} chunks from all documents")
        
        if chunks:
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            logger.info("Creating embeddings...")
            embeddings_data = embedder.embed_chunks(chunks[:10])  # –ü–µ—Ä–≤—ã–µ 10 —á–∞–Ω–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
            logger.info(f"‚úì Created embeddings for {len(embeddings_data)} chunks")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            vector_store.add_embeddings(embeddings_data)
            stats = vector_store.get_stats()
            logger.info(f"‚úì Vector store contains {stats['total_embeddings']} embeddings")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
            test_query = "deposit"
            results = vector_store.search_by_text(test_query, embedder, top_k=3)
            logger.info(f"‚úì Search returned {len(results)} results")
        
        # Create test doc
        test_dir = 'test_data'
        os.makedirs(test_dir, exist_ok=True)
        with open(os.path.join(test_dir, 'test.txt'), 'w') as f: f.write('Test content')
        vector_store.load_documents(test_dir, chunker, embedder)
        results = vector_store.search_by_text('test', embedder, top_k=15)
        assert len(results) >=1 and results[0]['similarity'] >= 0.3
        
        return True
    except Exception as e:
        logger.error(f"‚úó Document processing test failed: {e}")
        return False

def test_data_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("Testing data structure...")
    
    required_files = [
        "data/en/terms.txt",
        "data/en/sportsbook_rules.txt",
        "data/en/bonus_rules.txt",
        "data/en/privacy_policy.txt",
        "data/en/aml_policy.txt",
        "data/en/promotions.txt",
        "data/ru/terms.txt",
        "data/ru/sportsbook_rules.txt",
        "data/ru/bonus_rules.txt",
        "data/ru/privacy_policy.txt",
        "data/ru/aml_policy.txt",
        "data/ru/promotions.txt"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        logger.warning(f"‚ö† Missing files: {len(missing_files)}")
        for file_path in missing_files:
            logger.warning(f"  - {file_path}")
        return False
    else:
        logger.info("‚úì All required data files found")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("Starting TelSuppBot system tests...")
    
    tests = [
        ("Data Structure", test_data_structure),
        ("LineChunker", test_chunker),
        ("Embedder", test_embedder),
        ("VectorStore", test_vector_store),
        ("DocumentSearch", test_search),
        ("DeepSeek API", test_deepseek_api),
        ("Full Document Processing", test_document_processing)
    ]
    
    results = []
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"Running {test_name} test...")
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            logger.error(f"‚úó {test_name} test crashed: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info(f"\n{'='*50}")
    logger.info("TEST RESULTS:")
    logger.info("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úì PASS" if success else "‚úó FAIL"
        logger.info(f"{status} - {test_name}")
        if success:
            passed += 1
    
    logger.info("="*50)
    logger.info(f"Total: {passed}/{total} tests passed")
    
    if passed == total:
        logger.info("üéâ All tests passed! System is ready to run.")
        return 0
    else:
        logger.warning("‚ö† Some tests failed. Please check the issues above.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 